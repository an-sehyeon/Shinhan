[1.소프트웨어 설계] 

플랫폼 성능 분석 시 고려하는 항목
- 경과시간
- 사용률
- 응답시간
- 가용성 

데이터 흐름도
- 시간의 흐름을 명확이 표현할 수 없음(논리적 흐름 위주)

UML 다이어그램 중 순차 다이어그램
- 순차다이어그램은 행위 다이어그램이므로 동적, 순차적인 표현을 위한 다이어그램
- 개발 방법론이나 개발 프로세스가 아닌, 표준화된 모델링 언어
- 사물 / 관계 / 다이어그램으로 구성

유스케이스(Use Case) 다이어그램
- 시스템의 기능과 사용자의 상호작용을 시각적으로 표현한 다이어그램

유스케이스 다이어그램의 구성 요소
- 유스케이스 : 시스템이 액터에게 제공하는 특정 기능이나 서비스
- 액터 : 시스템 외부에서 시스템과 상호작용하는 사용자 또는 다른 시스템
- 시스템 : 유스케이스가 수행되는 경계를 나타내는 사각형으로, 다이어그램 내에서 시스템의 범위를 정의

유스케이스 다이어그램의 구성요소 관계
- 연관 : 실선으로 표현
- 포함 
- 확장
- 일반화 : 비슷한 일들을 더 일반적으로 묶을 때 활용

스크럼(Scrum)
- 팀이 복잡한 프로젝트를 관리하고 수행하는 데 도움을 주는 프레임워크

XP(eXtreame Programming)
- XP의 5가지 가치 : 용기, 단순성, 의사소통, 피드백, 존중
- 소프트웨어 품질을 높이고 개발팀이 변화에 빠르게 대응할 수 있도록 하는 데 중점을 둔 방법론
- 기술적인 실천과 지속적인 코드 개선 등 실용성에 중점을 둔 방법론

CASE(Computer-Aided Software Engineering)
- 소프트웨어 생명주기의 전 단계를 연결해 주고 자동화하는 소프트웨어 도구
- 개발 과정의 속도를 향상시키며, 소프트웨어 부품의 재사용을 가능하게 함

CASE의 기능
- 그래픽 지원
- 소프트웨어 생명주기 전 단계의 연결
- 다양한 소프트웨어 개발 모형 지원
- 표준화된 개발환경 구축 및 문서 자동화 기능

상위 Case
- 전체 시스템이나 프로젝트의 큰 틀을 다루는데 활용(모델 간 모순 검사, 모델의 오류 검증 등)

하위 Case
- 상위 Case의 작업을 실제로 구체화하는 데 활용(소스코드 생성 등)

UI의 유형
- CLI(Command Line Interface) : 텍스트 기반 인터페이스, 명령어를 텍스트로 입력
- NUI(Natural User Interface) : 키보드나 마우스없이 신체를 활용, 멀티 터치, 동작 인식 등을 활용
- GUI(Graphic User Interface) : 그래픽 환경을 기반으로 한 인터페이스, 키보드나 마우스 활용
- OUI(Organic User Interface) : 모든 사물 그대로가 인터페이스 장치가 됨

모듈의 특징
- 모듈의 수가 증가하면 상대적으로 각 모듈의 크기가 작아지고, 모듈 사이의 상호 교류가 증가함
- 시스템을 지능적으로 관리할 수 있도록 해주며, 복잡도 문제 해결에 도움이 됨
- 독립적인 컴피일이 가능함
- 유일한 이름을 가져야 함
- 다른 모듈에서의 접근이 가능해야 함

모듈 재사용의 유형
- 컴포넌트 재사용 / 애플리케이션 재사용 / 함수 및 객체 재사용

모듈화 측정 지표
- 응집도 : 독립성을 나타내는 개념, 모듈 내부 구성요소 간 연관된 정도(높을수록 좋음)
- 결합도 : 모듈과 모듈 간의 연관도(낮을수록 좋음)
- 응집도는 높고 결합도는 낮을수록 좋은 모듈

응집도 유형(낮은 순서 순)
- 우연적
- 논리적
- 시간적
- 절차적
- 통신적
- 순차적
- 기능적

결합도 유형(높은 순서 순)
- 내용
- 공통
- 외부
- 제어
- 스탬프
- 자료

HIPO(Hierarchy Input Process Output)
- 하향식 소프트웨어 개발을 위한 문서화 도구 

파이프 필터 패턴
- 데이터 처리를 여러 단계의 필터들로 구성된 파이프라인으로 나누어 설계한 패턴
- 각 필터는 데이터를 입력받아 특정 작업을 수행하고, 그 결과를 필터로 전달
- 단방향으로 흘리는 구조

객체
- 객체는 속성, 동작, 고유 식별자를 가진 모든 것

객체 지향 설계의 원칙(SOLID)
5가지 원칙
- 단일 책임의 원칙 : 하나의 클래스는 하나의 책임만, 즉 하나의 기능이나 역할만 담당해야 함
- 개방-폐쇄의 원칙 : 클래스는 확장에 대해 열려 있어야 하며, 변경에 대해 닫혀 있어야 함, 즉 새로운 기능을 추가할 때 기존 코드를 수정하지 말아야 함
- 리스코프 치환의 법칙 : 서브타입은 어디에서나 자신의 기반 타입으로 교체할 수 있어야함, 부모 클래스의 기능을 자식 클래스가 동일하게 수행할 수 있어야 함
- 인터페이스 분리의 원칙 : 클라이언트는 자신이 사용하지 않는 메소드에 의존하지 않아야 함
- 의존성 역전의 원칙 : 구체적인 클래스보다는 인터페이스나 추상 클래스에 의존해야 함

객체 지향 설계의 특징
- 다형성
- 캡슐화 : 객체 지향에서 정보 은닉과 가장 관계가 있는 것
- 상속
- 추상화 : 소프트웨어 설계 시 추상화 기법으로는 자료, 제어, 과정 추상화가 있음
- 정보은닉 : 정보 은닉의 근본 목적은 고려되지 않은 영향 최소화, 모듈들 사이의 독립성을 유지시키는데 도움, 요구사항 변화에 따라 모듈 내부의 자료 구조와 접근 동작들을 수정 가능함
- 관계성(연관화, 집단화, 분류화, 일반화, 특수화)

객체지향 분석 기법
럼바우 방법론
- 객체 모델 -> 동적 모델 -> 기능 모델로 나누어 순서대로 분석을 수행하는 방법
- 객체모델 : 시스템에 필요한 객체를 찾아내어 속성과 관계를 규정하여 다이어그램으로 표시
- 동적모델 : 상태 다이어그램, 사건 흐름 다이어그램 등을 통해 객체 간의 상호작용을 시간 순으로 표현
- 기능 모델 : 시스템의 기능을 자료 흐름도(DFD)를 통해 표현
 
 Booch 방법론 : 설계 문서화를 강조하여 다이어그램을 중심으로 개발
 Jacobson 방법론 : 유스케이스를 모든 모델의 근간으로 활용하는 방법론

디자인 패턴
- 소프트웨어 설계에서 자주 발생하는 문제에 대해 일반적이고 반복적인 해결 방법

GoF(Gang of Four)의 디자인 패턴
- 생성 패턴 : 객체를 어떻게 생성하고 초기화할지에 대한 패턴들
  Singleton : 한 클래스에 한 객체만 존재하도록 제한, 생성된 객체를 어디에서든지 참조할 수 있도록 함
  Prototype : prototype을 먼저 생성하고 인스턴스를 복제하여 사용하는 구조 
  Factory Method : 객체를 생성하기 위한 인터페이스를 정의하여 어떤 클래스가 인스턴스화 될것인지는 서브 클래스가 결정하도록 하는 것

- 구조 패턴 : 클래스와 객체를 더 큰 구조로 조합하는 방법에 대한 패턴들 
  Adaper, Bridge, Proxy, Decorator, Facade, Flyweight, Composite

- 행위 패턴 : 객체 간의 상호작용과 책임 분배에 대한 패턴들
  Mediator : 객체 간의 통제와 지시의 역할을 하는 중재자를 두어 객체 지향의 목표를 달성하도록 함 
  Strategy : 다양한 알고리즘을 캡슐화하여 알고리즘 대체가 가능하도록 한 행위 패턴
  Visitor, Command, Observer, State

요구사항 개발 프로세스
도출 -> 분석 -> 명세 -> 확인 및 검증

요구사항 도출
- 고객의 추상적인 요구사항을 식별하고 수집 방법을 결정하는 단계

요구사항 검토 방법(정형 기술 검토 기법)
워크 스루 
- 요구사항 명세서를 미리 배포하여 사전 검토한 후 짧은 검토 회의를 통해 오류를 조기에 검출하는 데 목적을 두는 방법
- 단순한 테스트 케이스를 이용하여 프로덕트를 수작업으로 수행해 보는 것
- 사용 사례를 확장하여 명세하거나 설계 다이어그램, 원시 코드, 테스트 케이스 등에 적용할 수 있음
- 복잡한 알고리즘 또는 반복, 실시간 동작, 병행 처리와 같은 기능이나 동작을 이해하려고 할 때 유용

메시지 지향 미들웨어
- 메시지 기반의 비동기형 메시지를 전달하는 방식의 미들웨어
- 다소 느리고 안정적인 응답을 필요로 하는 경우에 많이 사용



GOF(Gang of Four)디자인 패턴을 생성,구조,행동 패턴의 세 그룹으로 분류할 때, 구조 패턴이 아닌 것은?
구조패턴 : adapter, brdge, proxy
- builder패턴(생성패턴)

익스트림 프로그래밍
- 애자일 방법론 중 하나

UI종류로 멀티 터치, 동작 인식등 사용자의 움직임을 인식하여 서로 주고받는 정보를 제공하는 사용자 인터페이스
- NUL(Natural User Interface)

유스케이스의 구성요소
- 연관 : 유스케이스와 엑터간의 상호작용이 있음을 표현
- 확장 : 하나의 유스케이스가 다른 유스케이스의 실행을 전제로 할 때 형성되는 관계
- 확장 : 확장기능 유스케이스와 확장 대상 유스케이스 사이에 형성되는 관계
- 일반화 : 유사한 유스케이스 또는 엑터를 모아 추상화한 유스케이스 또는 엑터와 연결시켜 그룹을 만들어 이해도를 높이기 위한 관계 


=================================================================================================================================


[2.소프트웨어 개발]

자료구조의 분류
- 선형 구조 : 리스트, 스택, 큐, 데크
- 비선형 구조 : 트리, 그래프

선형 리스트
- 메모리의 연속된 공간에 데이터를 순서대로 저장

연결 리스트
- 각 요소가 데이터와 다음 요소에 대한 포인터를 포함해 저장

스택 
- LIFO

큐
- FIFO
- 한쪽 끝에서 삽입 작업, 반대쪽 끝에서 삭제 작업이 이뤄지는 자료 구조

데크
- 양방향에서 입출력이 가능한 자료 구조................................................

트리
- 그래프의 특수한 형태로 노드와 선분으로 구성
- 관계성이 계층 형식으로 나타나는 비선형 구조

트리의 차수 계산
- 특정 노드에 연결된 자식 노드의 수 중 max

이진 탐색 트리
- 왼쪽 자식 노드의 값은 부모 노드의 값보다 작고, 오른쪽 자식 노드의 값은 부모 노드의 값보다 큰 트리
- 최악의 경우 검색 효율이 가장 나쁜 트리

[소프트웨어 재사용]
재공학
- 기존 소프트웨어를 유지하면서 기능을 개선하거나 재활용하는 재사용 기법
- 주요 활동으로 분석, 재구조, 역공학(Reverse Engineering), 이식(Migration)등이 있음

소프트웨어 형상 관리
- 소프트웨어에서 일어나는 수정이나 버전 변경을 알아내고 관리하는 일련의 활동
- 소프트웨어 개발의 전체 비용을 줄이고 개발 과정의 여러 방해 요인을 최소화
- 대표적인 형상 관리 도구는 CVS, SVN, GIT 등

형상 관리 도구의 주요 기능
- 체크인 : 새로운 버전의 파일을 저장소에 올려 갱신하는 것
- 체크아웃 : 특정 버전의 파일을 저장소에서 작업 공간으로 가져오는 것
- 커밋

형상 관리의 절차
- 형상 식별 -> 형상 통제 -> 형상 감사 -> 형상 기록

소프트웨어 패키징의 특징
- 패키징은 사용자 중심으로 진행

소프트웨어 패키징 도구 활용 시 고려사항
- 다양한 이기종 연동을 고려
- 보안을 최우선으로 생각

DRM(Digital Rights Mavagement)
- 크랙 방지, 정책 관리, 암호화, 키 관리, 식별 기술, 저작권 표현, 암호화 파일 생성, 인증 등의 기술 요소가 있음

DRM의 구성 요소
- 콘텐츠 제공자 : 콘텐츠를 제공하는 저작권자
- 콘텐츠 소비자
- 콘텐츠 분배자 : 유통하는 중간 매개자(스트리밍 서비스 등)
- 클리어링 하우스 : 키 관리 및 라이선스 발급 관리 수행
- DRM의 콘텐츠 : DRM 기술로 보호된 디지털 콘텐츠

소프트웨어 품질 목표
- 이식성
- 신뢰성
- 효율성 : 시간반응성, 자원효율성, 준수성
- 유지 보수성
- 사용성
- 기능성 : 적합성, 정확성, 상호 운용성, 보안성, 준수성 등   

동시에 소스를 수정하는 것을 방지하며 다른 방향으로 진행된 개발 결과를 합치거나 변경 내용을 추적할 수 있는 소프트웨어 버전 관리 도구
- RCS(Revision Control System)

소프트웨어 테스트
- 소프트웨어가 예상대로 작동하는지 확인하기 위해 오류를 찾아내고 품질을 보장하는 과정

테스트 케이스
- 소프트웨어의 특정 기능이나 동작을 검증하기 위해 입력값, 실행 조건, 예상 결과를 명시한 일련의 집합
- 테스트의 목표 및 테스트 방법을 정한 이휴에 테스트 케이스를 작성

테스트 레벨
- 단위테스트 -> 통합테스트 -> 시스템 테스트 -> 인수 테스트

단위테스트
- 개별 모듈을 시험하는 것으로 모듈이 정확히 구현되었는지 점검하는 테스트
- 화이트 박스 테스트, 블랙 박스 테스트와 연관

화이트 박스 테스트
- 소스코드의 모든 문장을 한 번 이상 수행함으로써 진행됨
- 모듈안의 작동을 직접 관찰 가능
- 논리적 경로를 점검
- 데이터 흐름 검사, 루프 검사

블랙 박스 테스트
- 프로그램의 구조와 코드를 고려하지 않음
- 경곗값 분석, 오류 예측, 동등 분할 기법, 원인 결과 그래프 등

통합 테스트
- 개별 모듈이 결합되어 상호작용할 때 시스템이 올바르게 동작하는지 확인하는 테스트
- 상향식 테스트와 하향식 테스트와 연관

상향식 통합 테스트
- 하위 모듈에서 상위 모듈로 테스트를 진행하는 방식
- Test driver는 아직 개발되지 않은 상위 모듈을 대신해 하위 모듈을 호출하는 역할

하향식 통합 테스트
- 상위 모듈부터 하위 모듈로 테스트를 진행하는 방식
- Stup은 아직 개발되지 않은 하위 모듈을 대신해 임시로 사용되는 모듈

테스트 케이스 자동 생성 도구
- 자료 흐름도, 랜덤 테스트, 기능 테스트, 입력 도메인 분석

알고리즘 설계 기법
- 검색, 정렬, 분할 정복, 탐욕법, 동적 프로그래밍, 백트래킹

알고리즘 시간 복잡도
- 알고리즘이 실행되는데 걸리는 시간을 입력 크기와 연관지어 표현(주로 Big O표기법)

Big O 표기법
- 최악의 경우를 기준으로 알고리즘의 성능을 나타내는 표기법

O(1) : 상수 시간 복잡도, 입력 크기와 상관없이 항상 일정한 시간 소요 ex) 해시 함수
O(long) : 로그 시간 복잡도, 입력 크기에 따라 실행 시간이 log n만큼 커짐 ex) 이진 탐색
O(n) : 선형 시간 복잡도, 입력 크기와 실행 시간이 비례함 ex) 순차 탐색
O(nlogn) : 선형 로그형 시간 복잡도, 입력 크기에 따라 실행 시간이 nlog n만큼 커짐 ex) 합병 정렬, 힙 정렬, 퀵 정렬
O(n^2) : 제곱형 시간 복잡도, 입력 크기의 제곱에 비례해 실행 시간이 증가 ex) 삽입 정렬, 선택 정렬, 버블 정렬

순차 검색 알고리즘
- 리스트의 데이터를 처음부터 끝까지 순서대로 비교하며 원하는 값을 찾는 알고리즘
- 데이터가 정렬되어 있을 필요가 없고 구현이 간단함
- 시간복잡도는 O(n)으로, 검색 대상의 크기가 커질수록 성능이 저하

이진 검색 알고리즘
- 데이터가 정렬된 상태에서 중간값을 기준으로 값을 비교하여 데이터를 절반씩 좁혀가며 원하는 값을 찾음
- 탐색 효율이 좋고 (O(logn)) 탐색 시간이 적게 소요됨
- 검색할 데이터가 정렬되어 있어야 함

선택 정렬
- 배열에서 가장 작은 요소를 찾아 첫 번째 위치로 이동시키고, 나머지 배열에서도 같은 작업을 반복
- 시간 복잡도는 O(n^2)

삽입 정렬
- 배열을 순차적으로 탐색하면서 각 요소를 알맞은 순서에 삽입해 정렬하는 알고리즘
- 시간 복잡도는 O(n^2)

퀵 정렬
- 분할 정복을 기반으로 한 효율적인 정렬 알고리즘
- 피벗을 중심으로 부분적으로 나누어 가면서 정렬

힙 정렬
- 주어진 배열로 먼저 힙을 구성하고 가장 큰 키 값을 갖는 루트 노드들을 제거하는 과정을 반복

합병 정렬
- 리스트를 절반으로 나눈 뒤 각각을 정렬한 후 병합하여 전체를 정렬하는 알고리즘

EAI(Enterprise Application Intgration)
- 인터페이스를 사용하여 기업 내 다양한 애플리케이션 간의 데이터 및 프로세스를 통합하는 방식

EAI의 구축 유형
- Point-to-Point : 각 애플리케이션 간 직접 연결을 통해 통합하는 방식
- Hub and spoke : 중앙 허브가 모든 애플리케이션과 연결되어 데이터 전송을 관리하는 방식
- Message bus : 애클리케이션 사이에 미들웨어를 두어 애플리케이션 간 데이터를 교환
- Hybrid : Hub and spoke와 Message bus의 혼합 방식

인터페이스 보안을 위한 기술
- IPSec
- SSL/TLS
- S-HTTP 

인터페이스 구현 검증 도구
- STAF
- Satir
- xUnit
- FitNesse
- NTAF
- Selenium


=================================================================================================================================


[3. 데이터베이스 구축]

DDL(Data Definition Language, 데이터 정의어)
- CREATE, ALTER, DROP
- 데이터베이스의 구조를 정의하고 변경
- 테이블 인덱스, 뷰 등의 데이터 베이스 객체를 생성, 수정, 삭제하는 작업 수행

DML(Data Manipulation Language, 데이터 조작어)
- SELECT, INSERT, UPDATE, DELETE
- 데이터베이스에 저장된 데이터를 조작
- 데이터를 삽입, 수정, 삭제, 조회하는 작업 수행

DCL(Data Control Language, 데이터 제어어)
- GRANT, REVOKE, COMMIT, ROLLBACK
- 데이터베이스의 권한과 보안을 관리
- 데이터 보안, 무결성 유지, 병행 제어, 회복의 기능이 있음

외부 스키마 : 사용자 관점
- 데이터 모델의 외부 단계에 해당

개념 스키마 : 데이터베이스 전체 관점
- 데이터 모델의 개념 단계에 해당
- 데이터베이스의 전체 구조를 정의, 모든데이터를 통합하여 표현
- 데이터베이스 관리자가 관리하며, 데이터의 논리적인 구조화 제약 조건을 포함

내부 스키마 : 저장소 관점
- 데이터 모델의 내부 단계에 해당
- 물리적 저장 방식을 정의
- 실제로 데이터가 저장되는 방법과 구조에 대한 정보로, 데이터의 물리적 접근 경로나 저장 형식을 포함

개체(Entity) : 사각형
속성(Attribute) : 타원
관계(Relationship) ; 마름모
관계-속성연결 : 선

릴레이션(테이블) : 데이터를 표 형태로 표현한 것
속성(Attribute) : 릴레이션의 열(Column)
Degree(차수) : 속성의 개수
튜플(Tuple) : 릴레이션의 행
Cardinality : 튜플의 개수
도메인 : 속성에 들어가는 원자값 집합

뷰
- 논리적 데이터 독립성(물리적으로 존재하지 않는다.)
- 인덱스 가지지 못함
- 변경 못함 (삭제 후 재생성)
- 삽입, 삭제, 갱신에 제약이 있다.

데이터 사전(Data Dictionary)
- 시스템 카탈로그 라고도 한다.
- DBMS 자동으로 DDL 실행으로 생성되는 테이블, 뷰, 인덱스, 패키지, 접근 권한 등의 데이터베이스 구조 및 통계 정보를 저장
- 일반 user도 시스템 카탈로그의 내용을 검색할 수 있다.
- 일반 user는 시스템 카탈로그를 갱신할 수 없다.
- DBMS가 스스로 생성하고 유지**

트랜잭션의 특성
- 원자성(Atomicity) : 모든 연산은 모두 수행되거나, 전혀 수행되지 않아아 함.
- 일관성(Consistency) : 트랜잭션  완료 후에도 데이터베이스는 일관된 상태를 유지해야 함.
- 격리성(lsolation) : 트랜잭션 실행 중 중간 결과는 다른 트랜잭션에서 접근할 수 없음
- 영속성(Durability) : 성공적으로 완료된 트랜잭션의 결과는 시스템이 고장 나더라도 영구적으로 유지됨.

로킹
- 트랜잭션이 접근하는 동안 데이터를 잠궈 다른 트랜잭션이 접근하지 못하도록 보호
- 로킹단위가 커지면 그 외 모든게 작아지고 관리가 수월해짐
- 반대로, 로킹 단위가 작아지면 모든게 커지고 관리가 복잡해짐

병렬 데이터베이스 환경 중 수평 분할 : 하나의 테이블의 각 행을 다른 테이블에 분산시키는 것
- 라운드로빈 
- 범위 분할
- 해시 분할

정규화
- 비정규 릴레이션 -> 제1정규형 -> 제2정규형 -> 제3정규형 -> BCNF(보이스/코드 정규형) -> 제4정규형 -> 제5정규형 
- 정규화 단계 - 원부이 결다조
1. 원자화
2. 부분 함수 종속 제거
3. 이행 함수 종속 제거
4. BCNF : 결정자 함수 종속
5. 다치 종속성 제거
6. 조인 종속성 제거

- 제1정규형 : 릴레이션에 속한 모든 속성의 도메인이 원자값으로만 구성되어 있으면 제 1 정규형에 속한다.
- 제2정규형 : 제1 정규형에 속하고, 기본키가 아닌 모든 속성이 기본키에 완전 함수 종속되면 제2 정규형에 속한다.(부분 함수 종속 제거)
- 제3정규형 : 제2 정규형에 속하고, 기본키가 아닌 모든 속성이 기본키에 이행적 함수 종속이 되지 않으면 제3 정규형에 속한다.
- BCNF(보이스/코드) 정규형 : 릴레이션의 함수 종속 관계에서 모든 결정자가 후보키이면 보이스/코드 정규형에 속한다.
- 제4정규형 : BCNF 정규형을 만족하면서 함수 종속이 아닌 다치 종속을 제거해야 만족할 수 있다.
- 제5정규형 : 제4 정규형을 만족하면서 후보키를 통하지 않는 조인 종속을 제거해야 만족할 수 있다.

병행제어 기법 종류
- 로킹 기법
- 타임 스탬프 기법
- 최적 병행 수행 기법
- 다중 버전 기법

순수 관계 연산자 
- select
- project
- join
- division

일반 집합 연산자
- 합집합, 교집합, 차집합, 카티션 프로덕트(Cartesian Product)

트랜잭션이 수행한 최종 결과를 데이터베이스에 반영하지 않은 상태
- Partially Committed : 아직 Commit 연산 실행 전

데이터베이스에서 개념적 설계 단계에 대한 설명
- 개념적 설계 : 트랜잭션 모델링/ 독립적인 개념 스키마 모델링/ 개념스키마 설계/ E-R 다이아그램

데이터 모델의 구성 요소 중 실제로 표현된 값들을 처리하는 작업
- Operation : 실제 데이터를 처리하는 작업에 대한 명세로, 조작하는 기본 도구


=================================================================================================================================


[4.프로그그래밍 언어 활용]

HRN(Highest Response-ratio Next)스케줄링
- 최소작업우선(SJF) 기법의 약점을 보완한 비선점 스케줄링 기법
- 대기 시간이 긴 프로세스의 경우 우선순위가 높아짐
- 에이징 기법을 적용한 방법
- 우선순위를 계산하여 그 수치가 가장 높은것부터 낮은 순으로 우선순위가 부여됨.

RIP 라우팅 프로토콜에 대한 설명
- 라우팅 프로토콜을 IGP와  EGP로 분류했을 때 IGP에 해당
- 최단 경로 탐색에는 Bellman-Ford 알고리즘을 사용하는 거리 벡터 라우팅 프로토콜
- 소규모 네트워크 환경에 적합

파이썬 데이터 타입 중 시퀀스 데이터 타입에 해당하며 다양한 데이터 타입들을 주어진 순서에 따라 저장할 수 있으나 저장된 내용을 변경할 수 없는 것
- 튜플 타입

Myers가 구분한 응집도의 정도에서 가장 낮은 응집도를 갖는 단계
응집도 -> 강함
- 기능적 응집도 > 순차적 응집도 > 교환적 응집도 > 절차적 응집도 > 시각적 응집도 > 논리적 응집도 > 우연적 응집도

모듈의 결합도
- 내용 결합도 : 하나의 모듈이 직접적으로 다른 모듈의 내용을 참조할 때 두 모듈은 내용적으로 결합되어 있음
  (내용 참조, 자료 참조 단어가 있으면 내용결합도)
- 공통 결합도(전역변수 단어가 있으면 공통결합도)
- 응집도는 높게, 결합도는 낮게 설계된 소프트웨어가 좋은 소프트웨어

교착상태
2) 해결 방법
- **Avoidance : 자원 할당 전 시스템이 안전 상태를 유지하는지 확인
- Detection and Recovery : 교착상태 발생 후 감지하고 해결
- Prevention : 교착 상태의 조건 중 하나를 제거하여 발생 방지


기억장치 배치 전략
- First Fit : 가장 먼저 찾은 충분한 크기의 빈 공간에 프로그램을 배치
- Best Fit : 가장 근접한 크기의 빈 공간에 프로그램을 배치
- Worst Fit : 가장 큰 빈 공간에 프로그램을 배치

가상기억장치 관리 기법
- Paging : 고정 크기의 블록으로 나누어 관리, (내부단편화)
- Segmentation : 가변 크기의 블록으로 나누어 관리, (외부단편화)
- 페이지 크기 감소의 영향 
  1) 기억 장소 이용 효율 증가
  2) 내부 단편화 감소
  3) 페이지 맵 테이블의 크기는 증가

페이지 교체 알고리즘
- **FIFO
- **LRU(Least Recently Used) : 가장 오랫동안 사용되지 않은 페이지를 교체
- Optimal(OPT)
- LFU

스래싱(Thrashing)
- 교환 시간이 프로세스 실행 시간보다 클 때 발생
- 프로세스들 간의 메모리 경쟁으로 인하여 지나치게 페이지 부재가 발생하여 전체 시스템의 성능이 저하되는 현상
- 프로세스 수행에 보내는 시간보다 페이지 교환에 보내는 시간이 더 크면 스래싱 발생
- 해결 방법 : 충분한 프레임 수 제공, 워킹셋 개념 활용
- 워킹셋(Working Set) : 프로세스가 일정 시간 동안 자주 참조하는 페이지들의 집합으로, 스래싱 방지에 효과적

세그먼트 기법
- 논리 주소는 세그먼트 번호와 오프셋으로 구성
- 물리 주소 : 시작 주소 + 오프셋

지역성
- 시간 지역성(Temporal Locality) : 최근에 참조한 데이터를 다시 참조하는 특성
- 공간 지역성(Spatial Locality) : 인접한 주소를 연속적으로 참조하는 특성

OSI 7계층 
[데이터 링크 계층] 
- 물리적 연결을 이용해 신뢰성 있는 정보를 전송하려고 동기화, 오류제어, 흐름제어 등의 전송에러를 제어하는 계층

가비지 컬렉터(Garbage Collector)
- JAVA에서 힙에 남아있으나 변수가 가지고 있던 참조값을 잃거나 변수 자체가 없어짐으로써 더 이상 사용되지 않는 객체를 제거해주는 역할을 하는 모듈

JAVA에서 연산자 우선순위(낮은순->높은순)
- = > & > % > --

사용자 수준에서 지원되는 스레드가 커널에서 지원되는 스레드에 피해 가지는 장점
- 커널 모드로의 전환없이 스레드 교환이 가능하므로 오버헤드가 줄어든다.



=================================================================================================================================
 

[5.정보시스템 구축관리]

외부컴퓨터가 접속되면 접속 인가 여부를 점검해서 인가된 경우에는 접속허용되는 접근제어 유틸리티
- tcp wrapper

접근 통제 방법 중 개인의 역할에 따라 결정하여 부여하는 접근 정책
- RBAC : Role Based Access Control
  역할 기반 접근 통제 - 권한이 있는 사용자들만 접근할 수 있는 보안 방법

cocomo(Constructive Cost Model)모형의 특징
- 개발유형에 따라 조직형, 반분리형, 내장형으로 구분
- man-month = 투입노력
- 중소 규모 소프트웨어 프로젝트 비용 추적에 적합
- 비용 산정 기법 중 개발 유형으로 organic, semi-detach, embedded로 구분

푸트남(Putnam) 모형
- 소프트웨어 개발 주기의 각 단계마다 비중을 다르게 하여 비용을 산출하는 방법


각 사용자 인증의 유형에 대한 설명
1. 지식 : 본인이 알고 있는 것(패스워드,PIN)
2. 소유 : 본인이 가지고 있는 것(토큰,스마트카드)
3. 존재(생체) : 본인을 나타내는 것(홍채,지문)
4. 행위 : 본인이 하는 것(서명,움직임,음성)
- 존재라는 사용자 인증 유형은 없음

RIP
- 간단하고 설정이 쉬우며, 작은 네트워크에 적합
- 큰 네트워크에서는 홉 수 제한으로 인해 비효율적
- 최적의 경로를 선택하는 거리백터라우팅
- 최대 홉수는 15, 갱신 주기는 30초

OSPE
- 최단 경로 계산

대칭키 암호화
- 동일한 키를 사용하여 데이터를 암호화
- 속도가 빠르고 계산이 간단
- 키 교환이 필요함

비대칭키 암호화
- 암호화와 복호화에 서로 다른 키
- 공개키와 비밀키를 사용

DES는 64비트 암호화 알고리즘

AES : 암호화 키와 복호화 키가 동일한 암호화 알고리즘

RSA : 비대칭 암호화 방식으로 소수를 활용한 암호화 알고리즘

[서비스 공격]
스푸핑(Spoofing)
- 공격자가 자신을 다른 사람이나 시스템으로 속여서 신뢰를 얻거나 시스템에 접근하는 공격 기법

Smurf 공격 
- 네트워크 브로드캐스트 주소를 이용해 대량의 ICMP 에코 요청(ping)을 보내고, 네트워크를 마비시키는 분산 서비스 거부(DDoS) 공격

Ping of Death
- 허용된 최대 크기를 초과하는 패킷을 보내어 대상 시스템을 오버플로우시키는 공격

웜 : 스스로를 복제하고 다른 컴퓨터로 자동으로 퍼져나가는 독립적인 악성 소프트웨어
랜섬웨어 : 파일을 암호화하여 금전을 요구하는 소프트웨어
백도어 : 몰래 설치된 비정상적인 접근 경로
세션 하이재킹 : 세션을 가로채어 불법적으로 사용자의 권한을 탈취하는 공격 기법

PERT차트
- 프로젝트와 관련된 작업들을 표현함과 동시에 각 일정을 설정하고 조정하는데 
  사용되는 프로젝트 관리 도구

Python 기반의 웹 크롤링 프레임워크
- Scrapy

해쉬 기법
- 임의의 길이의 입력 데이터를 받아 고정된 길이의 해쉬 값으로 변환
- 해쉬 함수는 일방향 함수이다.
- 암호화, 무결성 검증을 위하여 사용

상향식 비용 산정 기법 중 LOC(원시 코드 라인 수 ) 기법에서 예측치를 구하기 위해 사용하는 항목
- 낙관치, 기대치, 비관치

OWASP(THe Open Web Application Security Project)
- 오픈소스 웹 애플리케이션 보안 프로젝트로서 주로 웹을 통한 정보 유출, 악성 파일 및 스크립트, 보안 취약점등을 연구하는 곳