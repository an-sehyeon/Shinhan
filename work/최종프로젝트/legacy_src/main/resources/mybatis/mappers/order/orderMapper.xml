<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.chacha.create.common.mapper.order.OrderMapper">
	<resultMap id="orderDTOResultMap" type="orderDTO">
		<!-- order_info -->
		<id property="orderId" column="order_id" />
		<result property="memberId" column="member_id" />
		<result property="orderDate" column="order_date" />
		<result property="orderName" column="order_name" />
		<result property="orderStatus" column="order_status" />

		<!-- order_detail -->
		<result property="orderDetailId" column="order_detail_id" />
		<result property="orderCnt" column="order_cnt" />
		<result property="orderPrice" column="order_price" />

		<!-- product -->
		<result property="productId" column="product_id" />
		<result property="storeId" column="store_id" />
		<result property="productName" column="product_name" />
		<result property="price" column="price" />

		<!-- addr -->
		<result property="addressId" column="address_id" />
		<result property="postNum" column="post_num" />
		<result property="addressRoad" column="address_road" />
		<result property="addressDetail" column="address_detail" />
		<result property="addressExtra" column="address_extra" />

		<!-- card -->
		<result property="cardId" column="card_id" />
		<result property="cardNum" column="card_num" />
		<result property="cardCompany" column="card_company" />
		
		<result property="totalCount" column="total_count" />
	</resultMap>

	<select id="selectForOrderDetailId" resultType="int"
		parameterType="map">
		SELECT order_detail_id
		FROM (
		SELECT od.order_detail_id
		FROM order_detail od
		JOIN order_info oi ON od.order_id = oi.order_id
		WHERE oi.member_id = #{memberId}
		AND od.product_id = #{productId}
		ORDER
		BY od.order_detail_id DESC
		)
		WHERE ROWNUM = 1
	</select>

	<select id="selectCardNumByOrderId" parameterType="int"
		resultType="string">
		SELECT c.card_num
		FROM order_info oi
		left outer JOIN card c
		ON oi.card_id = c.card_id
		WHERE oi.order_id = #{orderId}
	</select>

	<select id="selectByStatus" resultType="map"
		parameterType="string">
		SELECT order_detail.order_status, COUNT(*) cnt
		FROM
		order_detail
		JOIN order_info ON order_detail.order_id =
		order_info.order_id
		JOIN
		product ON order_detail.product_id =
		product.product_id
		JOIN store ON
		product.store_id = store.store_id
		WHERE
		store.store_Url = #{storeUrl}
		GROUP BY order_detail.order_status
	</select>

	<select id="selectByDayOrderSum" resultType="orderSumDTO"
		parameterType="string">
		SELECT TO_CHAR(order_info.order_date, 'YYYY-MM-DD') AS
		saleDate,
		SUM(order_detail.order_cnt * order_detail.order_price) AS
		total
		FROM order_info
		JOIN order_detail ON order_info.order_id =
		order_detail.order_id
		JOIN product ON order_detail.product_id =
		product.product_id
		JOIN store ON product.store_id = store.store_id
		WHERE store.store_Url = #{storeUrl} AND order_info.order_date >=
		SYSDATE - 7
		GROUP BY TO_CHAR(order_info.order_date, 'YYYY-MM-DD')
		ORDER
		BY saleDate
	</select>

	<select id="selectForOrderStatusOnly"
		resultType="orderStatusEnum" parameterType="String">
		select DISTINCT
		oi.order_status
		from store s
		left outer join product p on(s.store_id =
		p.store_id)
		join order_detail od on(p.product_id = od.product_id)
		left
		outer join order_info oi on(od.order_id = oi.order_id)
		where
		s.store_url = #{StoreUrl}
	</select>

	<select id="selectForRefundAll" resultMap="orderDTOResultMap"
		parameterType="String">
		SELECT
		oi.order_id,
		oi.member_id,
		oi.order_date,
		oi.order_name,
		oi.order_status,

		od.order_detail_id,
		od.order_cnt,
		od.order_price,

		p.product_id,
		p.store_id,
		p.product_name,
		p.price,

		a.address_id,
		a.post_num,
		a.address_road,
		a.address_detail,
		a.address_extra,

		c.card_id,
		c.card_num,
		c.card_company
		FROM order_info oi
		JOIN order_detail od ON oi.order_id = od.order_id
		JOIN product p ON
		od.product_id = p.product_id
		JOIN addr a ON oi.address_id =
		a.address_id
		left outer JOIN card c ON oi.card_id = c.card_id
		JOIN store
		s ON p.store_id = s.store_id
		WHERE s.store_url = #{storeUrl}
		AND
		oi.order_status IN ('REFUND', 'REFUND_OK')
		ORDER BY CASE
		oi.order_status
		WHEN 'REFUND' THEN 1
		WHEN 'REFUND_OK' THEN 2
		ELSE 3
		END
	</select>
	
	<select id="selectAll" resultMap="orderDTOResultMap" parameterType="map">
	    SELECT inner_q.*, cnt.total_count
	    FROM (
	        SELECT 
	            oi.order_id,
	            oi.member_id,
	            oi.order_date,
	            oi.order_name,
	            oi.address_id,
	            od.order_status,
	            od.order_detail_id,
	            od.order_cnt,
	            od.order_price,
	            p.product_id,
	            p.store_id,
	            p.product_name,
	            p.price,
	            c.card_id,
	            c.card_num,
	            c.card_company,
	            ROW_NUMBER() OVER (ORDER BY oi.order_date DESC) AS rn
	        FROM order_info oi
	        JOIN order_detail od ON oi.order_id = od.order_id
	        JOIN product p ON od.product_id = p.product_id
	        LEFT JOIN card c ON oi.card_id = c.card_id
	        JOIN store s ON p.store_id = s.store_id
	        WHERE s.store_url = #{storeUrl}
	    ) inner_q
	    CROSS JOIN (
	        SELECT COUNT(*) AS total_count
	        FROM order_info oi
	        JOIN order_detail od ON oi.order_id = od.order_id
	        JOIN product p ON od.product_id = p.product_id
	        JOIN store s ON p.store_id = s.store_id
	        WHERE s.store_url = #{storeUrl}
	    ) cnt
	    WHERE rn BETWEEN #{offset} + 1 AND #{offset} + #{size}
	</select>

	

	<select id="selectForOrderStatus" resultMap="orderDTOResultMap" parameterType="map">
	    SELECT inner_q.*, cnt.total_count
	    FROM (
	        SELECT 
	            oi.order_id,
	            oi.member_id,
	            oi.order_date,
	            oi.order_name,
	            oi.address_id,
	            od.order_status,
	            od.order_detail_id,
	            od.order_cnt,
	            od.order_price,
	            p.product_id,
	            p.store_id,
	            p.product_name,
	            p.price,
	            c.card_id,
	            c.card_num,
	            c.card_company,
	            ROW_NUMBER() OVER (ORDER BY oi.order_date DESC) AS rn
	        FROM order_info oi
	        JOIN order_detail od ON oi.order_id = od.order_id
	        JOIN product p ON od.product_id = p.product_id
	        LEFT JOIN card c ON oi.card_id = c.card_id
	        JOIN store s ON p.store_id = s.store_id
	        WHERE s.store_url = #{storeUrl}
	          AND od.order_status = #{orderStatus}
	    ) inner_q
	    CROSS JOIN (
	        SELECT COUNT(*) AS total_count
	        FROM order_info oi
	        JOIN order_detail od ON oi.order_id = od.order_id
	        JOIN product p ON od.product_id = p.product_id
	        JOIN store s ON p.store_id = s.store_id
	        WHERE s.store_url = #{storeUrl}
	          AND od.order_status = #{orderStatus}
	    ) cnt
	    WHERE rn BETWEEN #{offset} + 1 AND #{offset} + #{size}
	</select>



	<!-- 전체 조회 -->
	<!-- 개인판매자: 전체 주문 -->
	<select id="selectForPersonalAll" resultMap="orderDTOResultMap"
		parameterType="int">
		SELECT
		oi.order_id,
		oi.member_id,
		oi.order_date,
		oi.order_name,
		oi.order_status,
		oi.address_id, -- 주소 테이블 조인 대신 address_id만

		od.order_detail_id,
		od.order_cnt,
		od.order_price,

		p.product_id,
		p.store_id,
		p.product_name,
		p.price,

		c.card_id,
		c.card_num,
		c.card_company
		FROM order_info oi
		JOIN order_detail od ON oi.order_id = od.order_id
		JOIN product p ON od.product_id = p.product_id
		LEFT OUTER JOIN card c ON oi.card_id = c.card_id
		JOIN store s ON p.store_id = s.store_id
		JOIN seller sel ON s.seller_id = sel.seller_id
		WHERE sel.member_id = #{memberId}
		AND sel.personal_check = 1
		ORDER BY CASE oi.order_status
		WHEN 'ORDER_OK' THEN 1
		WHEN 'CONFIRM' THEN 2
		WHEN 'REFUND' THEN 3
		WHEN 'REFUND_OK' THEN 4
		ELSE 5
		END
	</select>

	<!-- 개인판매자: 환불 목록 -->
	<select id="selectForPersonalRefundAll"
		resultMap="orderDTOResultMap" parameterType="int">
		SELECT
		oi.order_id,
		oi.member_id,
		oi.order_date,
		oi.order_name,
		oi.order_status,
		oi.address_id,

		od.order_detail_id,
		od.order_cnt,
		od.order_price,

		p.product_id,
		p.store_id,
		p.product_name,
		p.price,

		c.card_id,
		c.card_num,
		c.card_company
		FROM order_info oi
		JOIN order_detail od ON oi.order_id = od.order_id
		JOIN product p ON od.product_id = p.product_id
		LEFT OUTER JOIN card c ON oi.card_id = c.card_id
		JOIN store s ON p.store_id = s.store_id
		JOIN seller sel ON s.seller_id = sel.seller_id
		WHERE sel.member_id = #{memberId}
		AND sel.personal_check = 1
		AND oi.order_status IN ('REFUND','REFUND_OK')
		ORDER BY CASE oi.order_status
		WHEN 'REFUND' THEN 1
		WHEN 'REFUND_OK' THEN 2
		ELSE 3
		END
	</select>

	<!-- 개인판매자: 상태별 -->
	<select id="selectForPersonalOrderStatus"
		resultMap="orderDTOResultMap" parameterType="map">
		SELECT
		oi.order_id,
		oi.member_id,
		oi.order_date,
		oi.order_name,
		oi.order_status,
		oi.address_id,

		od.order_detail_id,
		od.order_cnt,
		od.order_price,

		p.product_id,
		p.store_id,
		p.product_name,
		p.price,

		c.card_id,
		c.card_num,
		c.card_company
		FROM order_info oi
		JOIN order_detail od ON oi.order_id = od.order_id
		JOIN product p ON od.product_id = p.product_id
		LEFT OUTER JOIN card c ON oi.card_id = c.card_id
		JOIN store s ON p.store_id = s.store_id
		JOIN seller sel ON s.seller_id = sel.seller_id
		WHERE sel.member_id = #{memberId}
		AND sel.personal_check = 1
		AND oi.order_status = #{orderStatus}
	</select>


	<select id="selectOrderListByMemberId"
		resultType="com.chacha.create.common.dto.order.OrderListDTO"
		parameterType="int">
		SELECT
		oi.order_id,
		oi.order_date,
		p.product_id,
		p.product_name,
		p.product_detail,
		s.store_url,
		s.store_name,
		img.p_img_url,
		od.order_cnt,
		od.order_price,
		od.order_status
		FROM
		order_info oi
		JOIN order_detail od ON oi.order_id = od.order_id
		JOIN
		product p ON od.product_id = p.product_id
		JOIN store s ON
		p.store_id =
		s.store_id
		JOIN (
		SELECT * FROM p_img
		WHERE p_img_enum = 'THUMBNAIL' AND
		p_img_seq = 1
		) img ON p.product_id =
		img.product_id
		WHERE
		oi.member_id = #{memberId}
		ORDER BY
		oi.order_date DESC, oi.order_id
		DESC, od.order_detail_id ASC

	</select>

	<select id="selectOrderListByOrderId"
		resultType="com.chacha.create.common.dto.order.OrderListDTO">
		SELECT
		oi.order_date,
		oi.order_id,
		p.product_id,
		p.product_name,
		p.product_detail,
		s.store_name,
		img.p_img_url,
		od.order_detail_id,
		od.order_cnt,
		od.order_price,
		od.order_status
		FROM order_detail od
		JOIN
		order_info oi ON od.order_id = oi.order_id
		JOIN product p ON
		od.product_id = p.product_id
		JOIN store s ON
		p.store_id = s.store_id
		LEFT JOIN (
		SELECT * FROM p_img
		WHERE p_img_enum = 'THUMBNAIL' AND
		p_img_seq = 1
		) img ON p.product_id =
		img.product_id
		WHERE
		od.order_id = #{orderId}
		AND
		oi.member_id = #{memberId}
		ORDER BY od.order_detail_id ASC
	</select>

	<!-- <select id="selectOrderDetailByOrderId" resultType="com.chacha.create.common.dto.order.OrderDetailDTO"> 
		SELECT oi.order_id, oi.member_id, oi.order_date, oi.order_name, oi.order_phone, 
		oi.order_status, a.post_num, a.address_road, a.address_detail, a.address_extra, 
		c.card_num, c.card_company FROM order_info oi JOIN member m ON oi.member_id 
		= m.member_id JOIN addr a ON oi.address_id = a.address_id left outer JOIN 
		card c ON oi.card_id = c.card_id WHERE oi.order_id = #{orderId} AND oi.member_id 
		= #{memberId} </select> -->

	<select id="selectOrderDetailByOrderId"
		resultType="com.chacha.create.common.dto.order.OrderDetailDTO">
		SELECT
		oi.order_id,
		oi.address_id,
		oi.member_id,
		oi.order_date,
		oi.order_name,
		oi.order_phone,
		oi.order_status,
		c.card_num,
		c.card_company
		FROM order_info oi
		left outer JOIN card c ON
		oi.card_id = c.card_id
		WHERE oi.order_id = #{orderId}
		AND oi.member_id =
		#{memberId}
	</select>
</mapper>
